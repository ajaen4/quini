package tables

import (
	"fmt"
    "strconv"
    "time"
    "strings"
    "github.com/jackc/pgx/v5/pgtype"

    "app/internal/db"
    "app/internal/format"
)

templ MatchdayPredictions(matches []db.Match, predictions []db.UserPredictions) {
    <div class="overflow-x-auto w-full" x-data="{ showPercentages: false }">
        <div class="inline-block min-w-full rounded-lg shadow-lg">
            <style>
                @keyframes slow-blink {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.5; }
                }
                @keyframes score-blink-green {
                    0%, 100% { background-color: rgb(21 128 61); }
                    50% { background-color: rgb(34 197 94); }
                }
                @keyframes score-blink-red {
                    0%, 100% { background-color: rgb(185 28 28); }
                    50% { background-color: rgb(239 68 68); }
                }
                .score-blink-green {
                    background-color: rgb(21 128 61);
                    animation: score-blink-green 4s ease-in-out infinite;
                }
                .score-blink-red {
                    background-color: rgb(185 28 28);
                    animation: score-blink-red 4s ease-in-out infinite;
                }
                .status-blink {
                    animation: slow-blink 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;
                }
                .elige8-indicator {
                    position: relative;
                }
                .elige8-indicator::after {
                    content: '';
                    position: absolute;
                    top: 0;
                    right: 0;
                    width: 0;
                    height: 0;
                    border-style: solid;
                    border-width: 0 8px 8px 0;
                    border-color: transparent #3B82F6 transparent transparent;
                }
            </style>
            <table class="min-w-full bg-gray-800 text-sm border-collapse rounded-lg">
                <thead class="bg-gray-800">
                    <tr>
                        <th class="sticky left-0 z-10 bg-gray-800 py-3 border-b-2 border-r-2 border-gray-600 rounded-tl-lg min-w-[148px] md:w-[245px]">Partidos</th>
                        for _, pred := range predictions {
                            <th class="py-3 px-1 border-b-2 border-r border-gray-600 text-center rounded-tr-lg" colspan="2">
                                {pred.UserName}
                            </th>
                        }
                    </tr>
                    <tr>
                        <th class="sticky left-0 z-10 border-b border-r border-gray-600 bg-gray-800">
                            <button
                                @click="showPercentages = !showPercentages"
                                class="my-1 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                                x-text="showPercentages ? 'Esconder %' : 'Ver %'"
                            ></button>
                        </th>
                        for _, pred := range predictions {
                            if len(pred.Predictions) != 0 {
                                <th class={
                                    "py-2 px-1 border-b-2 border-gray-600 text-center font-bold",
                                    highlightSumColor(pred, 0, 1)
                                }>
                                    {strconv.Itoa(sumCorrect(pred.IsCorrect, 0))}
                                </th>
                                <th class={
                                    "py-2 px-1 border-r-2 border-b-2 border-gray-600 text-center font-bold",
                                    highlightSumColor(pred, 1, 0),
                                }>
                                    {strconv.Itoa(sumCorrect(pred.IsCorrect, 1))}
                                </th>
                            } else {
                                <th class={
                                    "py-2 px-1 border-b-2 border-gray-600 text-center font-bold",
                                }>
                                -
                                </th>
                                <th class={
                                    "py-2 px-1 border-r-2 border-b-2 border-gray-600 text-center font-bold",
                                }>
                                -
                                </th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    for i, match := range matches {
                        <tr>
                            <td class={
                                "sticky left-0 z-10 py-1 border-b border-r border-gray-600 bg-gray-800 min-w-[148px] md:w-[245px]",
                            }>
                                <div class="flex">
                                    <div class="flex flex-col justify-center ml-2 w-16">
                                        <div class="text-gray-300 whitespace-nowrap">
                                            { format.FormatMatchDateTime(match.KickoffDatetime.Time) }
                                        </div>
                                        <div class="text-gray-400 flex items-center gap-1 mt-1">
                                            <div class={
                                                "aspect-square p-1 rounded-full my-1",
                                                circleClasses(match, i)
                                            }></div>
                                            if match.Status == "1H" || match.Status == "HT" || match.Status == "2H" || match.Status == "ET" || match.Status == "FT" {
                                                <div class="bg-gray-700 rounded px-1 py-1 text-xs whitespace-nowrap inline-flex items-center">
                                                    <span class="font-medium">{ format.FormatGoals(match.HomeGoals) }</span>
                                                    <span class="mx-1">-</span>
                                                    <span class="font-medium">{ format.FormatGoals(match.AwayGoals) }</span>
                                                </div>
                                            }
                                            if match.Status == "1H" || match.Status == "HT" || match.Status == "2H" || match.Status == "ET" || match.Status == "FT" {
                                                <div class="border-gray-600">
                                                    <span class="font-medium text-xs">{ format.FormatMins(match) }</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="pl-3 md:pl-6">
                                        <div
                                            class="flex items-center mb-1"
                                            x-data="{
                                            retryCount: 0,
                                            maxRetries: 3
                                            }"
                                        >
                                            <img
                                                src={ match.HomeLogo }
                                                alt={ match.HomeCode }
                                                class="h-6 w-6 object-contain"
                                                @error="if(retryCount < maxRetries) {
                                                    retryCount++;
                                                    setTimeout(() => {
                                                        $el.src += '?' + Date.now()
                                                    }, 50 * Math.pow(2, retryCount))
                                                }"
                                            />
                                            <span class="text-sm ml-1">
                                                <span class="md:hidden">{ match.HomeCode }</span>
                                                <span class="hidden md:inline whitespace-nowrap pr-1">{ match.HomeName }</span>
                                            </span>
                                        </div>
                                        <div
                                            class="flex items-center mb-1"
                                            x-data="{
                                            retryCount: 0,
                                            maxRetries: 3
                                            }"
                                        >
                                            <img
                                                src={ match.AwayLogo }
                                                alt={ match.AwayCode }
                                                class="h-6 w-6 object-contain"
                                                @error="if(retryCount < maxRetries) {
                                                    retryCount++;
                                                    setTimeout(() => {
                                                        $el.src += '?' + Date.now()
                                                    }, 50 * Math.pow(2, retryCount))
                                                }"
                                            />
                                            <span class="text-sm ml-1">
                                                <span class="md:hidden">{ match.AwayCode }</span>
                                                <span class="hidden md:inline">{ match.AwayName }</span>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                if i != 14 {
                                    <div x-show="showPercentages" class="py-0 flex justify-center">
                                        <div class={
                                            "inline-flex items-center rounded-full px-1 py-0.5 mr-0.5 my-0.5 text-xs font-medium text-white",
                                            percentPredColor(match.HomePercent.Int32, match.DrawPercent.Int32, match.AwayPercent.Int32),
                                        }>
                                            <span class="mr-1">1:</span>
                                            <span class="font-bold">{ fmt.Sprintf("%d%%", match.HomePercent.Int32) }</span>
                                        </div>
                                        <div class={
                                            "inline-flex items-center rounded-full px-1 py-0.5 mr-0.5 my-0.5 text-xs font-medium text-white",
                                            percentPredColor(match.DrawPercent.Int32, match.HomePercent.Int32, match.AwayPercent.Int32),
                                        }>
                                            <span class="mr-1">X:</span>
                                            <span class="font-bold">{ fmt.Sprintf("%d%%", match.DrawPercent.Int32) }</span>
                                        </div>
                                        <div class={
                                            "inline-flex items-center rounded-full px-1 py-0.5 mr-0.5 my-0.5 text-xs font-medium text-white",
                                            percentPredColor(match.AwayPercent.Int32, match.DrawPercent.Int32, match.HomePercent.Int32),
                                        }>
                                            <span class="mr-1">2:</span>
                                            <span class="font-bold">{ fmt.Sprintf("%d%%", match.AwayPercent.Int32) }</span>
                                        </div>
                                    </div>
                                }
                            </td>
                            for _, pred := range predictions {
                                if len(pred.Predictions) != 0 {
                                    if i == len(matches) - 1 {
                                        // Last row for each user
                                        <td class={
                                            "py-2 border-r-2 border-gray-600 text-center border-b",
                                            isCorrectClass(pred.IsCorrect[i][0], match, pred.Predictions[i][0])
                                        } colspan="2">
                                            {pred.Predictions[i][0]}
                                        </td>
                                    } else {
                                    // Regular columns
                                    <td class={
                                        "py-2 px-2 text-center border-gray-600",
                                        isCorrectClass(pred.IsCorrect[i][0], match, pred.Predictions[i][0]),
                                        elige8Mark(pred.IsElige8[i][0])
                                    }>
                                        {pred.Predictions[i][0]}
                                    </td>
                                    <td class={
                                        "py-2 px-2 border-r-2 text-center border-gray-600",
                                        isCorrectClass(pred.IsCorrect[i][1], match, pred.Predictions[i][1]),
                                        elige8Mark(pred.IsElige8[i][1])
                                    }>
                                        {pred.Predictions[i][1]}
                                    </td>
                                    }
                                } else {
                                    if i == len(matches) - 1 {
                                        // Last row for each user
                                        <td class="py-2 border-r-2 border-gray-600 text-center border-b" colspan="2">
                                            {" "}
                                        </td>
                                    } else {
                                    // Regular columns
                                    <td class="py-2 px-2 text-center border-gray-600">
                                        {" "}
                                    </td>
                                    <td class="py-2 px-2 border-r-2 text-center border-gray-600">
                                        {" "}
                                    </td>
                                    }
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

func elige8Mark(isElige8 pgtype.Bool) string {
    if (isElige8.Valid && isElige8.Bool) {
        return "elige8-indicator"
    }
    return ""
}

func percentPredColor(currPred, pred2, pred3 int32) string {
    if currPred > pred2 && currPred > pred3 {
        return "bg-green-700"
    }

    if currPred > pred2 || currPred > pred3 {
        return "bg-orange-700"
    }

    return "bg-red-700"
}

func isCorrectClass(isCorrect pgtype.Bool, match db.Match, pred string) string {
    if isCorrect.Valid && isCorrect.Bool{
        return "bg-green-700"
    }

    if isCorrect.Valid && !isCorrect.Bool{
        return "bg-red-700"
    }

    if match.Status == "1H" || match.Status == "HT" || match.Status == "2H" || match.Status == "ET" {
        homeGoals := int(match.HomeGoals.Int32)
        awayGoals := int(match.AwayGoals.Int32)

        switch {
            case match.MatchNum == 14:
                predGoals := strings.Split(pred, "-")
                predHomeG, err := strconv.Atoi(predGoals[0])
                if err != nil {
                    return ""
                }
                awayHomeG, err := strconv.Atoi(predGoals[1])
                if err != nil {
                    return ""
                }

                if predHomeG == homeGoals && awayHomeG == awayGoals {
                    return "score-blink-green"
                }
                return "score-blink-red"

            case homeGoals > awayGoals:
                if pred == "1"{
                    return "score-blink-green"
                }
                return "score-blink-red"

            case homeGoals < awayGoals:
                if pred == "2"{
                    return "score-blink-green"
                }
                return "score-blink-red"

            case homeGoals == awayGoals:
                if pred == "X"{
                    return "score-blink-green"
                }
                return "score-blink-red"

            default:
                return ""
        }
    }
    return ""
}

func highlightSumColor(pred db.UserPredictions, indexC1, indexC2 int) string{
    if sumCorrect(pred.IsCorrect, indexC1) >= sumCorrect(pred.IsCorrect, indexC2){
        return "bg-amber-500"
    }
    return "bg-amber-700"
}

func sumCorrect(isCorrect [][]pgtype.Bool, colNum int) int {
    total := 0
    for _, colIsCorrect := range isCorrect {
        if colIsCorrect[colNum].Valid && colIsCorrect[colNum].Bool {
            total++
        }
    }
    return total
}

func circleClasses(match db.Match, matchIndex int) string {
    kickoff := match.KickoffDatetime
    if !kickoff.Valid {
        return "bg-gray-500"
    }

    kickoffTime := kickoff.Time
    madridLoc, _ := time.LoadLocation("Europe/Madrid")
    now := time.Now().In(madridLoc)

    if kickoffTime.After(now) {
        return "bg-gray-500"
    }

    if match.Status == "FT" {
        return "bg-gray-500"
    }

    if match.Status != "1H" && match.Status != "HT" && match.Status != "2H" && match.Status == "ET" {
        return "bg-gray-500"
    }

    return "bg-green-500 status-blink"
}
